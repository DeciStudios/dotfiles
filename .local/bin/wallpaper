#!/usr/bin/env python3

import os
import sys
import subprocess
# Define constants
wallpapers_dir = os.path.join(os.getenv('HOME'), 'Pictures', 'Wallpapers')
last_selected_file = os.path.join(os.getenv('HOME'), '.last_selected_wallpaper')
default_style = 'fill'

# Function to display the menu and set wallpaper
def select_wallpaper(style=default_style):
    clear_screen()
    print("Available Wallpapers:")
    print("---------------------")
    options = get_wallpapers_list()
    for i, opt in enumerate(options, 1):
        print(f"{i}. {opt}")

    while True:
        try:
            choice = int(input("Enter number to set wallpaper (0 to exit): "))
            if 0 < choice <= len(options):
                selected_wallpaper = options[choice - 1]
                selected_style = input("Choose style (fill/center/max/tile/scale) [default: fill]: ").strip().lower()
                if selected_style not in ['fill', 'center', 'max', 'tile', 'scale']:
                    selected_style = default_style
                    print(f"Invalid style option. Using default: {default_style}")
                print(f"Setting wallpaper to: {selected_wallpaper} with style: {selected_style}")
                set_wallpaper(selected_wallpaper, selected_style)
                write_last_selected(selected_wallpaper, selected_style)
                break
            elif choice == 0:
                sys.exit(0)
            else:
                print("Invalid option. Please choose a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

# Function to set the next wallpaper
def set_next_wallpaper(style=default_style):
    current_wallpaper, current_style = read_last_selected()
    options = get_wallpapers_list()
    if current_wallpaper in options:
        current_index = options.index(current_wallpaper)
        next_index = (current_index + 1) % len(options)
        next_wallpaper = options[next_index]
        print(f"Setting next wallpaper: {next_wallpaper} with style: {current_style}")
        set_wallpaper(next_wallpaper, current_style)
        write_last_selected(next_wallpaper, current_style)
    else:
        print("Current wallpaper not found in options.")

# Function to set the previous wallpaper
def set_prev_wallpaper(style=default_style):
    current_wallpaper, current_style = read_last_selected()
    options = get_wallpapers_list()
    if current_wallpaper in options:
        current_index = options.index(current_wallpaper)
        prev_index = (current_index - 1) % len(options)
        prev_wallpaper = options[prev_index]
        print(f"Setting previous wallpaper: {prev_wallpaper} with style: {current_style}")
        set_wallpaper(prev_wallpaper, current_style)
        write_last_selected(prev_wallpaper, current_style)
    else:
        print("Current wallpaper not found in options.")

# Function to set the most recent wallpaper
def set_recent_wallpaper():
    recent_wallpaper, recent_style = read_last_selected()
    if recent_wallpaper:
        print(f"Setting most recent wallpaper: {recent_wallpaper} with style: {recent_style}")
        set_wallpaper(recent_wallpaper, recent_style)
    else:
        print("No recent wallpaper selected.")

# Function to get list of wallpapers (including from subdirectories)
def get_wallpapers_list():
    wallpapers = []
    for root, dirs, files in os.walk(wallpapers_dir):
        for file in files:
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                wallpapers.append(os.path.relpath(os.path.join(root, file), wallpapers_dir))
    return wallpapers

# Function to set wallpaper using system command


def set_wallpaper(filename, style=default_style):
    full_path = os.path.join(wallpapers_dir, filename)
    style_map = {
        'fill': 'fill',
        'center': 'center',
        'max': 'fit',
        'tile': 'tile',
        'scale': 'stretch'
    }

    swaybg_style = style_map.get(style, 'fill')  # fallback to 'fill'

    if os.getenv("WAYLAND_DISPLAY"):  # Wayland (Sway)
        print(f"Using swaybg to set wallpaper in Wayland with style: {swaybg_style}")
        # Kill previous swaybg instance if any
        subprocess.call(['pkill', 'swaybg'])
        # Start new one
        subprocess.Popen([
            'swaybg',
            '--mode', swaybg_style,
            '--image', full_path
        ])
    elif os.getenv("DISPLAY"):  # X11 (i3, etc.)
        print(f"Using feh to set wallpaper in X11 with style: {style}")
        os.system(f"feh --bg-{style} '{full_path}'")
    else:
        print("Could not detect display environment (X11 or Wayland). Wallpaper not set.")


# Function to read last selected wallpaper and style from file
def read_last_selected():
    if os.path.isfile(last_selected_file):
        with open(last_selected_file, 'r') as f:
            data = f.read().strip().split('\n')
            if len(data) == 2:
                return data[0], data[1]
            elif len(data) == 1:
                return data[0], default_style
    return None, default_style

# Function to write last selected wallpaper and style to file
def write_last_selected(filename, style):
    with open(last_selected_file, 'w') as f:
        f.write(f"{filename}\n{style}")

# Function to clear screen
def clear_screen():
    os.system('clear')

# Main function
def main():
    # Check if last selected wallpaper file exists, otherwise create it
    if not os.path.isfile(last_selected_file):
        open(last_selected_file, 'a').close()

    # Check arguments
    if len(sys.argv) == 2:
        if sys.argv[1] in ['-n', '--next']:
            set_next_wallpaper()
        elif sys.argv[1] in ['-p', '--prev']:
            set_prev_wallpaper()
        elif sys.argv[1] in ['-r', '--recent']:
            set_recent_wallpaper()
        else:
            print(f"Invalid argument: {sys.argv[1]}")
            sys.exit(1)
    elif len(sys.argv) == 3:
        if sys.argv[1] in ['-n', '--next']:
            set_next_wallpaper(sys.argv[2])
        elif sys.argv[1] in ['-p', '--prev']:
            set_prev_wallpaper(sys.argv[2])
        elif sys.argv[1] in ['-r', '--recent']:
            set_recent_wallpaper()
        else:
            print(f"Invalid argument: {sys.argv[1]}")
            sys.exit(1)
    elif len(sys.argv) > 3:
        print("Usage: {} [-n|--next] [-p|--prev] [-r|--recent] [style]".format(sys.argv[0]))
        sys.exit(1)
    else:
        select_wallpaper()

if __name__ == "__main__":
    main()
