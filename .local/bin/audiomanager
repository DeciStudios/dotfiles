#!/usr/bin/env python3

import gi
import pulsectl

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib, Pango


class PulseAudioManager(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="PulseAudio Manager")
        self.set_default_size(600, 400)

        self.pulse = pulsectl.Pulse("PulseAudio Manager")
        self.sinks = self.pulse.sink_list()
        self.apps = self.pulse.sink_input_list()

        self.init_ui()

        # Add a timer to periodically refresh the mixer
        GLib.timeout_add_seconds(5, self.update_mixer)

    def init_ui(self):
        self.notebook = Gtk.Notebook()
        self.add(self.notebook)

        # Audio Device Dropdown and Master Volume
        self.device_box = Gtk.Box(spacing=6, orientation=Gtk.Orientation.VERTICAL)

        # Add padding to dropdown
        self.device_combo = Gtk.ComboBoxText()
        self.device_combo.set_margin_top(10)
        self.device_combo.set_margin_start(10)
        self.device_combo.set_margin_end(10)
        self.device_combo.set_margin_bottom(10)

        current_sink = self.pulse.server_info().default_sink_name
        for sink in self.sinks:
            self.device_combo.append(sink.name, sink.description)
            if sink.name == current_sink:
                self.device_combo.set_active_id(sink.name)
        self.device_combo.connect("changed", self.on_device_changed)
        self.device_box.pack_start(self.device_combo, False, False, 0)

        self.master_volume_box = Gtk.Box(
            spacing=6, orientation=Gtk.Orientation.HORIZONTAL
        )
        self.master_volume_box.set_margin_start(10)  # Add left margin
        self.master_volume_box.set_margin_end(10)  # Add right margin
        self.master_volume_box.set_margin_top(10)  # Add top margin
        self.master_volume_box.set_margin_bottom(10)  # Add bottom margin

        # Create a fixed-size icon container for vertical alignment
        self.master_volume_icon = Gtk.Image()
        self.update_volume_icon(self.master_volume_icon, 50)  # Initial icon update
        self.master_volume_icon.set_pixel_size(32)  # Set the icon size
        self.master_volume_icon.set_halign(Gtk.Align.START)
        self.master_volume_icon.set_margin_end(10)
        self.master_volume_icon.connect(
            "button-press-event", self.on_master_volume_icon_clicked
        )
        self.master_volume_box.pack_start(self.master_volume_icon, False, False, 0)

        # Master volume slider
        self.master_volume = Gtk.Scale.new_with_range(
            Gtk.Orientation.HORIZONTAL, 0, 100, 1
        )
        self.master_volume.set_draw_value(False)
        current_sink = self.pulse.server_info().default_sink_name
        if current_sink:
            sink = next(s for s in self.sinks if s.name == current_sink)
            self.master_volume.set_value(sink.volume.value_flat * 100)
        self.master_volume.set_margin_start(10)
        self.master_volume.connect("value-changed", self.on_master_volume_changed)
        self.master_volume_box.pack_start(self.master_volume, True, True, 0)

        # Volume label with increased font size
        self.master_volume_label = Gtk.Label(
            label=f"{int(self.master_volume.get_value())}%"
        )
        self.master_volume_label.set_xalign(1)
        self.master_volume_label.set_valign(Gtk.Align.CENTER)
        self.master_volume_label.set_margin_start(10)
        self.master_volume_label.modify_font(Pango.FontDescription("Sans 16"))
        self.master_volume_box.pack_start(self.master_volume_label, False, False, 0)

        self.device_box.pack_start(self.master_volume_box, False, False, 0)
        self.notebook.append_page(self.device_box, Gtk.Label(label="Audio Devices"))

        # Mixer Tab
        self.mixer_box = Gtk.Box(spacing=6, orientation=Gtk.Orientation.VERTICAL)
        self.mixer_box.set_margin_start(10)  # Add left margin
        self.mixer_box.set_margin_end(10)  # Add right margin
        self.mixer_box.set_margin_top(10)  # Add top margin
        self.mixer_box.set_margin_bottom(10)  # Add bottom margin

        # Create a ScrolledWindow for the mixer tab
        self.scrolled_window = Gtk.ScrolledWindow()
        self.scrolled_window.set_hexpand(True)
        self.scrolled_window.set_vexpand(True)
        self.scrolled_window.add(self.mixer_box)
        self.notebook.append_page(self.scrolled_window, Gtk.Label(label="Mixer"))

        # Connect to the switch-page signal to update mixer when tab is switched
        self.notebook.connect("switch-page", self.on_tab_switch)

        self.show_all()

    def on_device_changed(self, combo):
        active_sink_name = combo.get_active_id()
        if active_sink_name:
            for sink in self.sinks:
                if sink.name == active_sink_name:
                    self.pulse.sink_default_set(sink)
                    self.master_volume.set_value(sink.volume.value_flat * 100)
                    self.update_volume_icon(
                        self.master_volume_icon, sink.volume.value_flat * 100
                    )
                    self.master_volume_label.set_text(
                        f"{int(self.master_volume.get_value())}%"
                    )
                    break

    def on_master_volume_changed(self, scale):
        new_volume = scale.get_value() / 100.0
        active_sink_name = self.device_combo.get_active_id()
        if active_sink_name:
            for sink in self.sinks:
                if sink.name == active_sink_name:
                    self.pulse.volume_set_all_chans(sink, new_volume)
                    self.update_volume_icon(self.master_volume_icon, new_volume * 100)
                    self.master_volume_label.set_text(
                        f"{int(self.master_volume.get_value())}%"
                    )
                    break

    def update_mixer(self):
        # Refresh the list of applications and their volumes
        self.apps = self.pulse.sink_input_list()

        # Clear current mixer box content
        for child in self.mixer_box.get_children():
            self.mixer_box.remove(child)

        # Deduplicate applications
        app_map = {}
        for app in self.apps:
            app_name = app.proplist.get("application.name", "Unknown")
            if app_name not in app_map:
                app_map[app_name] = app
            else:
                existing_app = app_map[app_name]
                new_volume = (existing_app.volume.values[0] + app.volume.values[0]) / 2
                existing_app.volume.values[0] = new_volume

        # Create widgets for each application
        for app_name, app in app_map.items():
            app_box = Gtk.Box(spacing=6, orientation=Gtk.Orientation.HORIZONTAL)
            app_box.set_margin_start(5)
            app_box.set_margin_bottom(10)  # Add bottom padding

            app_icon = self.get_app_icon(
                app.proplist.get("application.icon_name", None), app_name
            )
            if app_icon:
                icon_image = Gtk.Image.new_from_pixbuf(app_icon)
                icon_image.set_pixel_size(32)  # Set the icon size
                icon_image.set_margin_end(10)
                app_box.pack_start(icon_image, False, False, 0)

            app_volume_box = Gtk.Box(spacing=6, orientation=Gtk.Orientation.HORIZONTAL)
            app_volume_box.set_margin_start(5)

            app_volume_icon = Gtk.Image()
            self.update_volume_icon(app_volume_icon, app.volume.value_flat * 100)
            app_volume_icon.set_pixel_size(32)  # Set the icon size
            app_volume_icon.set_margin_end(10)
            app_volume_icon.connect(
                "button-press-event", self.on_app_volume_icon_clicked, app.index
            )
            app_volume_box.pack_start(app_volume_icon, False, False, 0)

            app_volume = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL, 0, 100, 1)
            app_volume.set_draw_value(False)
            app_volume.set_value(app.volume.value_flat * 100)
            app_volume.set_margin_start(10)

            app_volume.connect("value-changed", self.on_app_volume_changed, app.index)
            app_volume_box.pack_start(app_volume, True, True, 0)

            # Volume label with increased font size
            app_volume_label = Gtk.Label(label=f"{int(app_volume.get_value())}%")
            app_volume_label.set_xalign(1)
            app_volume_label.set_valign(Gtk.Align.CENTER)
            app_volume_label.set_margin_start(10)
            app_volume_label.modify_font(Pango.FontDescription("Sans 16"))
            app_volume_box.pack_start(app_volume_label, False, False, 0)

            app_box.pack_start(app_volume_box, True, True, 0)
            self.mixer_box.pack_start(app_box, False, False, 0)

        self.show_all()
        return True  # Continue calling this function

    def update_volume_icon(self, icon_widget, volume):
        """Update the volume icon based on the volume level."""
        theme = Gtk.IconTheme.get_default()
        if volume == 0:
            icon_name = "audio-volume-muted"
        elif volume <= 33:
            icon_name = "audio-volume-low"
        elif volume <= 66:
            icon_name = "audio-volume-medium"
        else:
            icon_name = "audio-volume-high"

        if theme.has_icon(icon_name):
            icon_pixbuf = theme.load_icon(icon_name, 32, 0)
            icon_widget.set_from_pixbuf(icon_pixbuf)
        else:
            icon_widget.set_from_icon_name(icon_name, Gtk.IconSize.BUTTON)

    def get_app_icon(self, icon_name, app_name):
        theme = Gtk.IconTheme.get_default()
        if icon_name and theme.has_icon(icon_name):
            return theme.load_icon(icon_name, 48, 0)
        elif theme.has_icon(app_name.lower()):
            return theme.load_icon(app_name.lower(), 48, 0)
        elif theme.has_icon("application-default-icon"):
            return theme.load_icon("application-default-icon", 48, 0)
        else:
            return None

    def on_master_volume_icon_clicked(self, widget, event):
        """Toggle mute/unmute when the master volume icon is clicked."""
        active_sink_name = self.device_combo.get_active_id()
        if active_sink_name:
            for sink in self.sinks:
                if sink.name == active_sink_name:
                    if sink.volume.value_flat == 0:
                        # Unmute by setting volume to previous value
                        self.pulse.volume_set_all_chans(
                            sink, self.master_volume.get_value() / 100.0
                        )
                    else:
                        # Mute by setting volume to 0
                        self.pulse.volume_set_all_chans(sink, 0)
                        self.master_volume.set_value(0)
                        self.master_volume_label.set_text("0%")
                    self.update_volume_icon(
                        self.master_volume_icon, self.master_volume.get_value()
                    )
                    break

    def on_app_volume_icon_clicked(self, widget, event, app_index):
        """Toggle mute/unmute for an app when its volume icon is clicked."""
        for app in self.apps:
            if app.index == app_index:
                if app.volume.value_flat == 0:
                    # Unmute by setting volume to previous value
                    self.pulse.volume_set_all_chans(app, app.volume.value_flat)
                else:
                    # Mute by setting volume to 0
                    self.pulse.volume_set_all_chans(app, 0)
                    app_volume_slider = widget.get_parent().get_children()[1]
                    app_volume_slider.set_value(0)
                    app_volume_label = widget.get_parent().get_children()[2]
                    app_volume_label.set_text("0%")
                self.update_volume_icon(
                    widget, self.pulse.volume_get(app).value_flat * 100
                )
                break

    def on_app_volume_changed(self, scale, app_index):
        new_volume = scale.get_value() / 100.0
        for app in self.apps:
            if app.index == app_index:
                try:
                    self.pulse.volume_set_all_chans(app, new_volume)
                    # Update the icon and label for this app's volume
                    app_volume_icon = scale.get_parent().get_children()[0]
                    self.update_volume_icon(app_volume_icon, new_volume * 100)
                    scale.get_parent().get_children()[2].set_text(
                        f"{int(scale.get_value())}%"
                    )
                except pulsectl.PulseOperationFailed as e:
                    print(f"Error setting volume for app {app_index}: {e}")
                break

    def on_tab_switch(self, notebook, page, page_num):
        # Update the mixer when the tab is switched
        if page_num == 1:  # Check if the mixer tab is selected
            self.update_mixer()


if __name__ == "__main__":
    app = PulseAudioManager()
    app.connect("destroy", Gtk.main_quit)
    Gtk.main()
